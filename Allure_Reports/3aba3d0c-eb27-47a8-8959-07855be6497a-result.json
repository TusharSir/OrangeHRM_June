{"name": "test_OrangeHRM_Login_Excel_005", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'D:\\\\Batch Notes\\\\Automation Testing may 2025\\\\05. OrangeHRM_Pytest\\\\TestData\\\\Test_Data.xlsx'", "trace": "self = <testCases.test_OrangeHRM_Login_Excel_003.Test_OrangeHRM_Login_001 object at 0x0000026AF9750890>\n\n    def test_OrangeHRM_Login_Excel_005(self):\n        self.log.info(\"test_OrangeHRM_Login_005 is started\")\n        self.log.info(\"Opening url \" + self.login_url)\n        self.lp = Login_Page_Class(self.driver)\n        self.log.info(\"Reading data from excel file\")\n>       self.rows = XLUtils.get_row_count(self.excel_file_path, self.sheet_name)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntestCases\\test_OrangeHRM_Login_Excel_003.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutlities\\XLUtils.py:4: in get_row_count\n    workbook = openpyxl.load_workbook(file)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\03. Pytest Framework\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:346: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n..\\03. Pytest Framework\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n                   ^^^^^^^^^^^^^^^^^^^^^\n..\\03. Pytest Framework\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\n              ^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\nfile = 'D:\\\\Batch Notes\\\\Automation Testing may 2025\\\\05. OrangeHRM_Pytest\\\\TestData\\\\Test_Data.xlsx'\nmode = 'r', compression = 0, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\n                              ^^^^^^^^^^^^^^^^^^^^^^^\nE                   FileNotFoundError: [Errno 2] No such file or directory: 'D:\\\\Batch Notes\\\\Automation Testing may 2025\\\\05. OrangeHRM_Pytest\\\\TestData\\\\Test_Data.xlsx'\n\nC:\\Users\\Credence\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\zipfile\\__init__.py:1331: FileNotFoundError"}, "attachments": [{"name": "log", "source": "9bcfbd64-4295-45a8-8e6f-70549d0ec48b-attachment.txt", "type": "text/plain"}], "start": 1750473444443, "stop": 1750473444448, "uuid": "9e22e9c4-1b0b-4bf1-8fd6-3624959a227a", "historyId": "28ebb52f9653b66606922fb625f33801", "testCaseId": "28ebb52f9653b66606922fb625f33801", "fullName": "testCases.test_OrangeHRM_Login_Excel_003.Test_OrangeHRM_Login_001#test_OrangeHRM_Login_Excel_005", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_OrangeHRM_Login_Excel_003"}, {"name": "subSuite", "value": "Test_OrangeHRM_Login_001"}, {"name": "host", "value": "Credence-Pc"}, {"name": "thread", "value": "21008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_OrangeHRM_Login_Excel_003"}]}